/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package liderexpress;

/**
 *
 * @author Your Name <Edison Sanchez>
 *///import com.jacob.com.*;

import java.io.*;
import java.sql.*;

import java.io.FileOutputStream;
import java.util.Date;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import javax.swing.JOptionPane;
import static liderexpress.Cliente.connect;
import static liderexpress.QueryLog.log;


public class pdf {
    
    
  private static String FILE = "C:\\Users\\Kevin\\Desktop\\reportes\\reporte7.pdf";
 // File file = new File("C:\\Users\\chupy\\.ssh\\LiderExpress\\" + "reporte.pdf");
  private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
      Font.BOLD);
  private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
      Font.NORMAL, BaseColor.RED);
  private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
      Font.BOLD);
  private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
      Font.BOLD);

        public void newpdf(String idcliente) {
    try {
      Document document = new Document();
      PdfWriter.getInstance(document, new FileOutputStream(FILE));
      document.open();
      addMetaData(document);
      addTitlePage(document);
      addContent(document,idcliente);
      System.out.println("setio");
      document.close();
      System.out.println("cerro");
    } catch (Exception e) {
      e.printStackTrace();
      System.out.println("ex");
    }
    
    
}
  
  private static void addMetaData(Document document) {
    document.addTitle("Reporte de pagos por Cliente");
    document.addSubject("");
    document.addKeywords("");
    document.addAuthor("Lider Express");
    document.addCreator("Edinson Sanchez, Kevin Filella, Roberto Yoncon , Pedro Iñiguez");
  }
  private static void addTitlePage(Document document)
      throws DocumentException {
    Paragraph preface = new Paragraph();
    // We add one empty line
    addEmptyLine(preface, 1);
    // Lets write a big header
    preface.add(new Paragraph("Reporte de Pagos por cliente", catFont));

    addEmptyLine(preface, 1);
    // Will create: Report generated by: _name, _date
    preface.add(new Paragraph("Report generated by: Edinson Sanchez, Kevin Filella, Roberto Yoncon , Pedro Iñiguez  "+ new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
        smallBold));
    addEmptyLine(preface, 3);
    
    
    preface.add(new Paragraph("Este reporte presenta los pagos realizados por el cliente",
        smallBold));

    addEmptyLine(preface, 8);

    document.add(preface);
    // Start a new page
    document.newPage();
  }

  private static void addContent(Document document, String idCliente) throws DocumentException, SQLException {
    ResultSet rs = null; 
     try {
         System.out.println("ini");
            Connection con=connect.Conexion_SQL();
            Statement sentencia=con.createStatement();
            String query="SELECT nombre from cliente where id_cliente="+idCliente+";";
            sentencia.execute(query);
            System.out.println("midd");
            rs = sentencia.getResultSet();
            System.out.println("fin");
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, "Error dato cliente no encontrado");
        }
    System.out.println("a"); 
    Anchor anchor = new Anchor("Cliente:", catFont);
    anchor.setName("");
    System.out.println("b");
    // Second parameter is the number of the chapter
    Chapter catPart = new Chapter(new Paragraph(anchor), 1);
    rs.next();
    Paragraph subPara = new Paragraph(rs.getString("nombre"), subFont);
    Section subCatPart = catPart.addSection(subPara);
    subCatPart.add(new Paragraph("Pagos"));
    System.out.println("c");
    //subPara = new Paragraph("Subcategory 2", subFont);
    //subCatPart = catPart.addSection(subPara);
    //subCatPart.add(new Paragraph("Paragraph 1"));
    //subCatPart.add(new Paragraph("Paragraph 2"));
    //subCatPart.add(new Paragraph("Paragraph 3"));

    // add a list
   // createList(subCatPart);
    //Paragraph paragraph = new Paragraph();
    //addEmptyLine(paragraph, 5);
    //subCatPart.add(paragraph);

    // add a table
    createTable(subCatPart,idCliente);

    // now add all this to the document
    document.add(catPart);

    // Next section
   // anchor = new Anchor("Second Chapter", catFont);
   // anchor.setName("Second Chapter");

    // Second parameter is the number of the chapter
   //catPart = new Chapter(new Paragraph(anchor), 1);

   // subPara = new Paragraph("Subcategory", subFont);
    //subCatPart = catPart.addSection(subPara);
   // subCatPart.add(new Paragraph("This is a very important message"));

    // now add all this to the document
    document.add(catPart);

  }
  
  
  private static void createTable(Section subCatPart, String idCliente)
      throws BadElementException, SQLException {
    PdfPTable table = new PdfPTable(2);

    // t.setBorderColor(BaseColor.GRAY);
    // t.setPadding(4);
    // t.setSpacing(4);
    // t.setBorderWidth(1);
    ResultSet rs = null; 
     try {
         System.out.println("ini");
            Connection con=connect.Conexion_SQL();
            Statement sentencia=con.createStatement();
            String query="SELECT c.nombre,o.id_orden,f.id_factura,p.id_pago,p.cantidad,p.fecha from cliente c, orden o, factura2 f, pago2 p where p.id_factura=f.id_factura and c.id_cliente=o.id_cliente and o.id_orden=f.id_orden and c.id_cliente="+idCliente+";";
            sentencia.execute(query);
            System.out.println("midd");
            rs = sentencia.getResultSet();
            System.out.println("fin");
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, "Error dato cliente no encontrado");
        }

    PdfPCell c1 = new PdfPCell(new Phrase("Nombre"));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);

    c1 = new PdfPCell(new Phrase("ID Orden"));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);
    
    c1 = new PdfPCell(new Phrase("ID Factura"));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);
    
    c1 = new PdfPCell(new Phrase("ID Pago"));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);
    
    c1 = new PdfPCell(new Phrase("Valor"));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);
    
    c1 = new PdfPCell(new Phrase("Fecha Pago"));
    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
    table.addCell(c1);
    while(rs.next()){
    
    table.setHeaderRows(1);
    table.addCell(rs.getString("nombre"));
    table.addCell(rs.getString("id_orden"));
    table.addCell(rs.getString("id_factura"));
    table.addCell(rs.getString("id_pago"));
    table.addCell(rs.getString("cantidad"));
    table.addCell(rs.getString("fecha"));
    //table.addCell("1.2");
    
    }
    //table.addCell("2.1");
    //table.addCell("2.2");
    //table.addCell("2.3");

    subCatPart.add(table);

  }

  private static void createList(Section subCatPart) {
    List list = new List(true, false, 10);
    list.add(new ListItem("First point"));
    list.add(new ListItem("Second point"));
    list.add(new ListItem("Third point"));
    subCatPart.add(list);
  }

  private static void addEmptyLine(Paragraph paragraph, int number) {
    for (int i = 0; i < number; i++) {
      paragraph.add(new Paragraph(" "));
    }
  }
} 

